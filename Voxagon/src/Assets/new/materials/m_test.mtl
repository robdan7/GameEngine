<material name="m_test">
	<shader type="vertex" name="m_test_vertex">
		<code>
		#version 450 core
		layout (std140, binding = 1) uniform Matrices {
			layout(offset = 0) uniform mat4 camera;
			layout(offset = 64) uniform mat4 viewMatrix;
			layout(offset = 128) uniform mat4 translateMatrix;
			layout(offset = 192) uniform mat4 staticOrthoMatrix;
			layout(offset = 256) uniform mat4 dynamicOrthoMatrix;
		}
		
		layout(location = 0) in vec4 inVertex;
		layout(location = 1) in vec3 inNormal;
		layout(location = 2) in vec2 inUV;
		layout(location = 3) in mat4 inTranslationMatrix;
		
		layout(location = 0) OUTPUT {
			layout(location = 0) vec3 vertexPosition;
			layout(location = 1) vec4 vertexNormal;
			layout(location = 2) vec2 UV;
			
		} vertexOutput;
		
		void main() {
			vertexOutput.vertexPosition = translateMatrix*inVertex;
			vertexOutput.UV = vec2(0,0);
			vertexOutput.vertexNormal = inNormal;
			gl_Position = camera*vertexOutput.vertexPosition ;
		}
		</code>
	</shader>
	<shader type="fragment" name="m_test_fragment">
		<code>
		#version 450 core
		layout(location = 0) INPUT {
			layout(location = 0) vec3 fragmentPosition;
			layout(location = 1) vec4 fragmentNormal;
			layout(location = 2) vec3 UV;
		} fragmentInput;
		
		layout(location = 0) out vec4 color;
		layout(location = 1) out vec4 normal;
		layout(location = 2) out vec4 worldCoords;
		
		void main() {
			normal = vec4(fragmentInput.fragmentPosition.xyz*0.5+0.5,1);
			color = vec4(1,0,0,1);
			worldCoords = fragmentInput.fragmentPosition;
		}
		</code>
	</shader>

</material>