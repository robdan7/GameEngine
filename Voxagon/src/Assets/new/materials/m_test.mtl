<material name="m_test">
	<shader type="vertex" name="m_test_vertex">
		<uniform name="Light" instance="lightSource">
			<uniform type="vec4" name="test"/>
		</uniform>
		<uniform name="Matrices" instance="mat">
			<uniform type="mat4" name="camera"/>
			<uniform type="mat4" name="viewMatrix"/>
			<uniform type="mat4" name="translateMatrix"/>
			<uniform type="mat4" name="staticOrthoMatrix"/>
			<uniform type="mat4" name="dynamicOrthoMatrix"/>
		</uniform>
		<attribute qualifier="in" type="vec4" name="vertexIn"/> 
		<attribute qualifier="in" type="vec3" name="normal"/> 
		<attribute qualifier="in" type="vec2" name="uvIn"/>
		<attribute location="0" qualifier="out" name="PipelineData" instance="vertexOutput">
			<attribute location="0" type="vec4" name="position"/>
			<attribute location="2" type="vec4" name="normal"/>
			<attribute location="3" type="vec2" name="UV"/>
			<attribute type="vec2" name="test"/>
		</attribute>
		<code>
		#version 450 core
		
		
		<placeholder type="uniform"/>
		<placeholder type="attribute"/>
		
		//layout(location = 0) in vec4 vertexIn;
		//layout(location = 1) in vec3 normal;
		//layout(location = 2) in vec2 uvIn;
		layout(location = 3) in mat4 inTranslationMatrix;
	


		//layout(location = 0) out PipelineData {
		//	layout(location = 0) vec4 position;
		//	layout(location = 2) vec4 normal;
		//	layout(location = 3) vec2 UV;

		//} vertexOutput;

		void main() {

			vertexOutput.normal = normalize(vec4(normal,0));
			

			vertexOutput.UV = uvIn.xy;
			vertexOutput.position = vertexIn;

	
			gl_Position  = mat.camera* vertexOutput.position;
		}
		</code>
	</shader>
	<shader type="fragment" name="m_test_fragment">
		<code>
		#version 450 core
		uniform sampler2D modelTexture;

		//in vec4 staticDepthPos, dynamicDepthPos;

		
		layout(location = 0) in PipelineData {
			layout(location = 0) vec4 position;
			layout(location = 2) vec4 normal;
			layout(location = 3) vec2 UV;
			layout(location = 4) vec2 test;
		} fragmentData;

		layout(location = 0) out vec4 outColor;	// locations are stored in Quad.java
		layout(location = 1) out vec4 outNormal;
		layout(location = 2) out vec4 worldPosition;
		
		<import>/Assets/new/shaders/diffuse.shd</import>

		void main() {

			outNormal = vec4(fragmentData.normal.xyz*0.5+0.5,1);
			outColor = diffuse(vec4(1,0,0,1));
			worldPosition = fragmentData.position;
	
			gl_FragDepth = gl_FragCoord.z;
		}
		</code>
	</shader>

</material>